"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inquirer_1 = __importDefault(require("inquirer"));
const mainMenu = {
    type: 'list',
    name: 'mainMenu',
    message: 'What do you want to do?',
    choices: [
        { name: 'Git', value: 'git' },
        { name: 'Clean', value: 'clean' },
        { name: 'NPM Install', value: 'npmi' },
        { name: 'NPM Prepare', value: 'npmpre' },
        { name: 'Pull Request', value: 'pr' },
        new inquirer_1.default.Separator(),
        { name: 'Exit', value: 'exit' },
    ],
};
function printEnv() {
    console.log(`RootDir: ${global.config.rootDir}`);
    console.log(`Git:`);
    if (global.config.git.username)
        console.log(`     username      : ${global.config.git.username}`);
    console.log(`     team          : ${global.config.git.team}`);
    console.log(`     host          : ${global.config.git.host}`);
    console.log(`     project prefix: ${global.config.git.projectPrefix}`);
    console.log(`Project List:`);
    console.log(`[ ${global.config.projects.join(' | ')} ]`);
    if (global.config.pullRequestSkip && global.config.pullRequestSkip.length > 0) {
        console.log(`PullRequest skip:`);
        console.log(`[ ${global.config.pullRequestSkip.join(' | ')} ]`);
    }
    if (global.config.pullRequestSkip && global.config.dockerBaseImages.length > 0) {
        console.log(`Docker base images:`);
        console.log(`[ ${global.config.dockerBaseImages.join(' | ')} ]`);
    }
}
function run() {
    printEnv();
    inquirer_1.default.prompt(mainMenu).then(answers => {
        const selected = answers['mainMenu'];
        if (selected === 'exit')
            return;
        require(`lib/${selected}`).run();
    });
}
exports.default = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHdEQUErQjtBQUUvQixNQUFNLFFBQVEsR0FBc0I7SUFDbEMsSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLEVBQUUsVUFBVTtJQUNoQixPQUFPLEVBQUUseUJBQXlCO0lBQ2xDLE9BQU8sRUFBRTtRQUNQLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQzdCLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO1FBQ2pDLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO1FBQ3RDLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO1FBQ3hDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQ3JDLElBQUksa0JBQVEsQ0FBQyxTQUFTLEVBQUU7UUFDeEIsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7S0FDSDtDQUMvQixDQUFBO0FBRUQsU0FBUyxRQUFRO0lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUNoRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ25CLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUTtRQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDakcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUM3RCxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQzdELE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUE7SUFFdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUV4RCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDN0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ2hFO0lBRUQsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDOUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDakU7QUFDSCxDQUFDO0FBRUQsU0FBd0IsR0FBRztJQUN6QixRQUFRLEVBQUUsQ0FBQTtJQUNWLGtCQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN2QyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDcEMsSUFBSSxRQUFRLEtBQUssTUFBTTtZQUFFLE9BQU07UUFDL0IsT0FBTyxDQUFDLE9BQU8sUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNsQyxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFQRCxzQkFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFuc3dlcnMsIENob2ljZVR5cGUsIFF1ZXN0aW9uIH0gZnJvbSAnaW5xdWlyZXInXG5pbXBvcnQgaW5xdWlyZXIgZnJvbSAnaW5xdWlyZXInXG5cbmNvbnN0IG1haW5NZW51OiBRdWVzdGlvbjxBbnN3ZXJzPiA9IHtcbiAgdHlwZTogJ2xpc3QnLFxuICBuYW1lOiAnbWFpbk1lbnUnLFxuICBtZXNzYWdlOiAnV2hhdCBkbyB5b3Ugd2FudCB0byBkbz8nLFxuICBjaG9pY2VzOiBbXG4gICAgeyBuYW1lOiAnR2l0JywgdmFsdWU6ICdnaXQnIH0sXG4gICAgeyBuYW1lOiAnQ2xlYW4nLCB2YWx1ZTogJ2NsZWFuJyB9LFxuICAgIHsgbmFtZTogJ05QTSBJbnN0YWxsJywgdmFsdWU6ICducG1pJyB9LFxuICAgIHsgbmFtZTogJ05QTSBQcmVwYXJlJywgdmFsdWU6ICducG1wcmUnIH0sXG4gICAgeyBuYW1lOiAnUHVsbCBSZXF1ZXN0JywgdmFsdWU6ICdwcicgfSxcbiAgICBuZXcgaW5xdWlyZXIuU2VwYXJhdG9yKCksXG4gICAgeyBuYW1lOiAnRXhpdCcsIHZhbHVlOiAnZXhpdCcgfSxcbiAgXSBhcyBSZWFkb25seUFycmF5PENob2ljZVR5cGU+LFxufVxuXG5mdW5jdGlvbiBwcmludEVudigpIHtcbiAgY29uc29sZS5sb2coYFJvb3REaXI6ICR7Z2xvYmFsLmNvbmZpZy5yb290RGlyfWApXG4gIGNvbnNvbGUubG9nKGBHaXQ6YClcbiAgaWYgKGdsb2JhbC5jb25maWcuZ2l0LnVzZXJuYW1lKSBjb25zb2xlLmxvZyhgICAgICB1c2VybmFtZSAgICAgIDogJHtnbG9iYWwuY29uZmlnLmdpdC51c2VybmFtZX1gKVxuICBjb25zb2xlLmxvZyhgICAgICB0ZWFtICAgICAgICAgIDogJHtnbG9iYWwuY29uZmlnLmdpdC50ZWFtfWApXG4gIGNvbnNvbGUubG9nKGAgICAgIGhvc3QgICAgICAgICAgOiAke2dsb2JhbC5jb25maWcuZ2l0Lmhvc3R9YClcbiAgY29uc29sZS5sb2coYCAgICAgcHJvamVjdCBwcmVmaXg6ICR7Z2xvYmFsLmNvbmZpZy5naXQucHJvamVjdFByZWZpeH1gKVxuXG4gIGNvbnNvbGUubG9nKGBQcm9qZWN0IExpc3Q6YClcbiAgY29uc29sZS5sb2coYFsgJHtnbG9iYWwuY29uZmlnLnByb2plY3RzLmpvaW4oJyB8ICcpfSBdYClcblxuICBpZiAoZ2xvYmFsLmNvbmZpZy5wdWxsUmVxdWVzdFNraXAgJiYgZ2xvYmFsLmNvbmZpZy5wdWxsUmVxdWVzdFNraXAubGVuZ3RoID4gMCkge1xuICAgIGNvbnNvbGUubG9nKGBQdWxsUmVxdWVzdCBza2lwOmApXG4gICAgY29uc29sZS5sb2coYFsgJHtnbG9iYWwuY29uZmlnLnB1bGxSZXF1ZXN0U2tpcC5qb2luKCcgfCAnKX0gXWApXG4gIH1cblxuICBpZiAoZ2xvYmFsLmNvbmZpZy5wdWxsUmVxdWVzdFNraXAgJiYgZ2xvYmFsLmNvbmZpZy5kb2NrZXJCYXNlSW1hZ2VzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zb2xlLmxvZyhgRG9ja2VyIGJhc2UgaW1hZ2VzOmApXG4gICAgY29uc29sZS5sb2coYFsgJHtnbG9iYWwuY29uZmlnLmRvY2tlckJhc2VJbWFnZXMuam9pbignIHwgJyl9IF1gKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJ1bigpIHtcbiAgcHJpbnRFbnYoKVxuICBpbnF1aXJlci5wcm9tcHQobWFpbk1lbnUpLnRoZW4oYW5zd2VycyA9PiB7XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSBhbnN3ZXJzWydtYWluTWVudSddXG4gICAgaWYgKHNlbGVjdGVkID09PSAnZXhpdCcpIHJldHVyblxuICAgIHJlcXVpcmUoYGxpYi8ke3NlbGVjdGVkfWApLnJ1bigpXG4gIH0pXG59XG4iXX0=