"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inquirer_1 = __importDefault(require("inquirer"));
const util_1 = require("lib/util");
const mainMenu = {
    type: 'list',
    name: 'mainMenu',
    message: 'What do you want to do?',
    choices: [
        { name: 'Git', value: 'git' },
        { name: 'Clean', value: 'clean' },
        { name: 'NPM Install', value: 'npmi' },
        { name: 'NPM Prepare', value: 'npmpre' },
        { name: 'Pull Request', value: 'pr' },
        new inquirer_1.default.Separator(),
        { name: 'Exit', value: 'exit' },
    ],
};
function printEnv() {
    util_1.log(`RootDir: ${global.config.rootDir}`);
    util_1.log(`Git:`);
    if (global.config.git.username)
        util_1.log(`     username      : ${global.config.git.username}`);
    util_1.log(`     team          : ${global.config.git.team}`);
    util_1.log(`     host          : ${global.config.git.host}`);
    util_1.log(`     project prefix: ${global.config.git.projectPrefix}`);
    util_1.log(`Project List:`);
    util_1.log(`[ ${global.config.projects.join(' | ')} ]`);
    if (global.config.pullRequestSkip && global.config.pullRequestSkip.length > 0) {
        util_1.log(`PullRequest skip:`);
        util_1.log(`[ ${global.config.pullRequestSkip.join(' | ')} ]`);
    }
    if (global.config.pullRequestSkip && global.config.dockerBaseImages.length > 0) {
        util_1.log(`Docker base images:`);
        util_1.log(`[ ${global.config.dockerBaseImages.join(' | ')} ]`);
    }
}
function run() {
    printEnv();
    inquirer_1.default.prompt(mainMenu).then(answers => {
        const selected = answers.mainMenu;
        if (selected === 'exit')
            return;
        require(`lib/${selected}`).run();
    });
}
exports.default = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHdEQUErQjtBQUMvQixtQ0FBOEI7QUFFOUIsTUFBTSxRQUFRLEdBQXNCO0lBQ2xDLElBQUksRUFBRSxNQUFNO0lBQ1osSUFBSSxFQUFFLFVBQVU7SUFDaEIsT0FBTyxFQUFFLHlCQUF5QjtJQUNsQyxPQUFPLEVBQUU7UUFDUCxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUM3QixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRTtRQUNqQyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtRQUN0QyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtRQUN4QyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtRQUNyQyxJQUFJLGtCQUFRLENBQUMsU0FBUyxFQUFFO1FBQ3hCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0tBQ0g7Q0FDL0IsQ0FBQTtBQUVELFNBQVMsUUFBUTtJQUNmLFVBQUcsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUN4QyxVQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDWCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVE7UUFBRSxVQUFHLENBQUMsd0JBQXdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDekYsVUFBRyxDQUFDLHdCQUF3QixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ3JELFVBQUcsQ0FBQyx3QkFBd0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNyRCxVQUFHLENBQUMsd0JBQXdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUE7SUFFOUQsVUFBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBQ3BCLFVBQUcsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFaEQsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzdFLFVBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ3hCLFVBQUcsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDeEQ7SUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUM5RSxVQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQTtRQUMxQixVQUFHLENBQUMsS0FBSyxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDekQ7QUFDSCxDQUFDO0FBRUQsU0FBd0IsR0FBRztJQUN6QixRQUFRLEVBQUUsQ0FBQTtJQUNWLGtCQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN2QyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFBO1FBQ2pDLElBQUksUUFBUSxLQUFLLE1BQU07WUFBRSxPQUFNO1FBQy9CLE9BQU8sQ0FBQyxPQUFPLFFBQVEsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDbEMsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBUEQsc0JBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbnN3ZXJzLCBDaG9pY2VUeXBlLCBRdWVzdGlvbiB9IGZyb20gJ2lucXVpcmVyJ1xuaW1wb3J0IGlucXVpcmVyIGZyb20gJ2lucXVpcmVyJ1xuaW1wb3J0IHsgbG9nIH0gZnJvbSAnbGliL3V0aWwnXG5cbmNvbnN0IG1haW5NZW51OiBRdWVzdGlvbjxBbnN3ZXJzPiA9IHtcbiAgdHlwZTogJ2xpc3QnLFxuICBuYW1lOiAnbWFpbk1lbnUnLFxuICBtZXNzYWdlOiAnV2hhdCBkbyB5b3Ugd2FudCB0byBkbz8nLFxuICBjaG9pY2VzOiBbXG4gICAgeyBuYW1lOiAnR2l0JywgdmFsdWU6ICdnaXQnIH0sXG4gICAgeyBuYW1lOiAnQ2xlYW4nLCB2YWx1ZTogJ2NsZWFuJyB9LFxuICAgIHsgbmFtZTogJ05QTSBJbnN0YWxsJywgdmFsdWU6ICducG1pJyB9LFxuICAgIHsgbmFtZTogJ05QTSBQcmVwYXJlJywgdmFsdWU6ICducG1wcmUnIH0sXG4gICAgeyBuYW1lOiAnUHVsbCBSZXF1ZXN0JywgdmFsdWU6ICdwcicgfSxcbiAgICBuZXcgaW5xdWlyZXIuU2VwYXJhdG9yKCksXG4gICAgeyBuYW1lOiAnRXhpdCcsIHZhbHVlOiAnZXhpdCcgfSxcbiAgXSBhcyBSZWFkb25seUFycmF5PENob2ljZVR5cGU+LFxufVxuXG5mdW5jdGlvbiBwcmludEVudigpOnZvaWQge1xuICBsb2coYFJvb3REaXI6ICR7Z2xvYmFsLmNvbmZpZy5yb290RGlyfWApXG4gIGxvZyhgR2l0OmApXG4gIGlmIChnbG9iYWwuY29uZmlnLmdpdC51c2VybmFtZSkgbG9nKGAgICAgIHVzZXJuYW1lICAgICAgOiAke2dsb2JhbC5jb25maWcuZ2l0LnVzZXJuYW1lfWApXG4gIGxvZyhgICAgICB0ZWFtICAgICAgICAgIDogJHtnbG9iYWwuY29uZmlnLmdpdC50ZWFtfWApXG4gIGxvZyhgICAgICBob3N0ICAgICAgICAgIDogJHtnbG9iYWwuY29uZmlnLmdpdC5ob3N0fWApXG4gIGxvZyhgICAgICBwcm9qZWN0IHByZWZpeDogJHtnbG9iYWwuY29uZmlnLmdpdC5wcm9qZWN0UHJlZml4fWApXG5cbiAgbG9nKGBQcm9qZWN0IExpc3Q6YClcbiAgbG9nKGBbICR7Z2xvYmFsLmNvbmZpZy5wcm9qZWN0cy5qb2luKCcgfCAnKX0gXWApXG5cbiAgaWYgKGdsb2JhbC5jb25maWcucHVsbFJlcXVlc3RTa2lwICYmIGdsb2JhbC5jb25maWcucHVsbFJlcXVlc3RTa2lwLmxlbmd0aCA+IDApIHtcbiAgICBsb2coYFB1bGxSZXF1ZXN0IHNraXA6YClcbiAgICBsb2coYFsgJHtnbG9iYWwuY29uZmlnLnB1bGxSZXF1ZXN0U2tpcC5qb2luKCcgfCAnKX0gXWApXG4gIH1cblxuICBpZiAoZ2xvYmFsLmNvbmZpZy5wdWxsUmVxdWVzdFNraXAgJiYgZ2xvYmFsLmNvbmZpZy5kb2NrZXJCYXNlSW1hZ2VzLmxlbmd0aCA+IDApIHtcbiAgICBsb2coYERvY2tlciBiYXNlIGltYWdlczpgKVxuICAgIGxvZyhgWyAke2dsb2JhbC5jb25maWcuZG9ja2VyQmFzZUltYWdlcy5qb2luKCcgfCAnKX0gXWApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcnVuKCk6dm9pZCB7XG4gIHByaW50RW52KClcbiAgaW5xdWlyZXIucHJvbXB0KG1haW5NZW51KS50aGVuKGFuc3dlcnMgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkID0gYW5zd2Vycy5tYWluTWVudVxuICAgIGlmIChzZWxlY3RlZCA9PT0gJ2V4aXQnKSByZXR1cm5cbiAgICByZXF1aXJlKGBsaWIvJHtzZWxlY3RlZH1gKS5ydW4oKVxuICB9KVxufVxuIl19