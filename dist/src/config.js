"use strict";
;
(() => {
    const dotenv = require('dotenv');
    const pjson = require('../../package.json');
    dotenv.config({ path: './.msh' });
    dotenv.config({ path: './.msh-user' });
    const envToJson = (env, def) => {
        try {
            return JSON.parse(process.env[env]);
        }
        catch (_) {
            return def;
        }
    };
    const envToBoolean = (env, def) => {
        if ((env || '') === '')
            return def;
        return env.toLocaleLowerCase() === 'true';
    };
    global.projectName = pjson.name;
    global.projectVersion = pjson.version;
    global.config = Object.freeze({
        rootDir: process.env.ROOT_DIR || process.cwd() || './',
        projects: envToJson('PROJECTS', []),
        pullRequestSkip: envToJson('PULL_REQUEST_SKIP', []),
        git: {
            team: process.env.GIT_TEAM || '',
            projectPrefix: process.env.GIT_PROJECT_PREFIX || '',
            host: process.env.GIT_HOST || 'bitbucket.org',
            username: process.env.GIT_USERNAME || '',
            password: process.env.GIT_PASSWORD || '',
        },
        dockerBaseImages: envToJson('DOCKER_BASE_IMAGES', []),
        cmd: {
            gitEnabled: envToBoolean(process.env.CMD_GIT_ENABLED, true),
            cleanEnabled: envToBoolean(process.env.CMD_CLEAN_ENABLED, true),
            npmEnabled: envToBoolean(process.env.CMD_NPM_ENABLED, true),
            prEnabled: envToBoolean(process.env.CMD_PR_ENABLED, true),
        },
    });
    global.exitAfterCommandExecuted = false;
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBMkJBLENBQUM7QUFBQSxDQUFDLEdBQUcsRUFBRTtJQUNMLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNoQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtJQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFBO0lBRXRDLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBTyxFQUFFO1FBQ2xDLElBQUk7WUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQVcsQ0FBQyxDQUFBO1NBQzlDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLEdBQUcsQ0FBQTtTQUNYO0lBQ0gsQ0FBQyxDQUFBO0lBQ0QsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBWSxFQUFXLEVBQUU7UUFDbEQsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxHQUFHLENBQUE7UUFDbEMsT0FBTyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxNQUFNLENBQUE7SUFDM0MsQ0FBQyxDQUFBO0lBRUQsTUFBTSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFBO0lBQy9CLE1BQU0sQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQTtJQUNyQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDNUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxJQUFJO1FBQ3RELFFBQVEsRUFBRSxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztRQUNuQyxlQUFlLEVBQUUsU0FBUyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQztRQUNuRCxHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRTtZQUNoQyxhQUFhLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFO1lBQ25ELElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxlQUFlO1lBQzdDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxFQUFFO1lBQ3hDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxFQUFFO1NBQ3pDO1FBQ0QsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQztRQUNyRCxHQUFHLEVBQUU7WUFDSCxVQUFVLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQztZQUMzRCxZQUFZLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDO1lBQy9ELFVBQVUsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDO1lBQzNELFNBQVMsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDO1NBQzFEO0tBQ0YsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxDQUFDLHdCQUF3QixHQUFHLEtBQUssQ0FBQTtBQUN6QyxDQUFDLENBQUMsRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZGVjbGFyZSBuYW1lc3BhY2UgTm9kZUpTIHtcbiAgaW50ZXJmYWNlIEdsb2JhbCB7XG4gICAgcHJvamVjdE5hbWU6IHN0cmluZ1xuICAgIHByb2plY3RWZXJzaW9uOiBzdHJpbmdcbiAgICBjb25maWc6IHtcbiAgICAgIHJvb3REaXI6IHN0cmluZ1xuICAgICAgcHJvamVjdHM6IHN0cmluZ1tdXG4gICAgICBwdWxsUmVxdWVzdFNraXA6IHN0cmluZ1tdXG4gICAgICBnaXQ6IHtcbiAgICAgICAgdGVhbTogc3RyaW5nXG4gICAgICAgIHByb2plY3RQcmVmaXg6IHN0cmluZ1xuICAgICAgICBob3N0OiBzdHJpbmdcbiAgICAgICAgdXNlcm5hbWU6IHN0cmluZ1xuICAgICAgICBwYXNzd29yZDogc3RyaW5nXG4gICAgICB9XG4gICAgICBkb2NrZXJCYXNlSW1hZ2VzOiBzdHJpbmdbXVxuICAgICAgY21kOiB7XG4gICAgICAgIGdpdEVuYWJsZWQ6IGJvb2xlYW5cbiAgICAgICAgY2xlYW5FbmFibGVkOiBib29sZWFuXG4gICAgICAgIG5wbUVuYWJsZWQ6IGJvb2xlYW5cbiAgICAgICAgcHJFbmFibGVkOiBib29sZWFuXG4gICAgICB9XG4gICAgfVxuICAgIGV4aXRBZnRlckNvbW1hbmRFeGVjdXRlZDogYm9vbGVhblxuICB9XG59XG5cbjsoKCkgPT4ge1xuICBjb25zdCBkb3RlbnYgPSByZXF1aXJlKCdkb3RlbnYnKVxuICBjb25zdCBwanNvbiA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpXG4gIGRvdGVudi5jb25maWcoeyBwYXRoOiAnLi8ubXNoJyB9KVxuICBkb3RlbnYuY29uZmlnKHsgcGF0aDogJy4vLm1zaC11c2VyJyB9KVxuXG4gIGNvbnN0IGVudlRvSnNvbiA9IChlbnYsIGRlZik6IGFueSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHByb2Nlc3MuZW52W2Vudl0gYXMgc3RyaW5nKVxuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIHJldHVybiBkZWZcbiAgICB9XG4gIH1cbiAgY29uc3QgZW52VG9Cb29sZWFuID0gKGVudiwgZGVmOiBib29sZWFuKTogYm9vbGVhbiA9PiB7XG4gICAgaWYgKChlbnYgfHwgJycpID09PSAnJykgcmV0dXJuIGRlZlxuICAgIHJldHVybiBlbnYudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gJ3RydWUnXG4gIH1cblxuICBnbG9iYWwucHJvamVjdE5hbWUgPSBwanNvbi5uYW1lXG4gIGdsb2JhbC5wcm9qZWN0VmVyc2lvbiA9IHBqc29uLnZlcnNpb25cbiAgZ2xvYmFsLmNvbmZpZyA9IE9iamVjdC5mcmVlemUoe1xuICAgIHJvb3REaXI6IHByb2Nlc3MuZW52LlJPT1RfRElSIHx8IHByb2Nlc3MuY3dkKCkgfHwgJy4vJyxcbiAgICBwcm9qZWN0czogZW52VG9Kc29uKCdQUk9KRUNUUycsIFtdKSxcbiAgICBwdWxsUmVxdWVzdFNraXA6IGVudlRvSnNvbignUFVMTF9SRVFVRVNUX1NLSVAnLCBbXSksXG4gICAgZ2l0OiB7XG4gICAgICB0ZWFtOiBwcm9jZXNzLmVudi5HSVRfVEVBTSB8fCAnJyxcbiAgICAgIHByb2plY3RQcmVmaXg6IHByb2Nlc3MuZW52LkdJVF9QUk9KRUNUX1BSRUZJWCB8fCAnJyxcbiAgICAgIGhvc3Q6IHByb2Nlc3MuZW52LkdJVF9IT1NUIHx8ICdiaXRidWNrZXQub3JnJyxcbiAgICAgIHVzZXJuYW1lOiBwcm9jZXNzLmVudi5HSVRfVVNFUk5BTUUgfHwgJycsXG4gICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuR0lUX1BBU1NXT1JEIHx8ICcnLFxuICAgIH0sXG4gICAgZG9ja2VyQmFzZUltYWdlczogZW52VG9Kc29uKCdET0NLRVJfQkFTRV9JTUFHRVMnLCBbXSksXG4gICAgY21kOiB7XG4gICAgICBnaXRFbmFibGVkOiBlbnZUb0Jvb2xlYW4ocHJvY2Vzcy5lbnYuQ01EX0dJVF9FTkFCTEVELCB0cnVlKSxcbiAgICAgIGNsZWFuRW5hYmxlZDogZW52VG9Cb29sZWFuKHByb2Nlc3MuZW52LkNNRF9DTEVBTl9FTkFCTEVELCB0cnVlKSxcbiAgICAgIG5wbUVuYWJsZWQ6IGVudlRvQm9vbGVhbihwcm9jZXNzLmVudi5DTURfTlBNX0VOQUJMRUQsIHRydWUpLFxuICAgICAgcHJFbmFibGVkOiBlbnZUb0Jvb2xlYW4ocHJvY2Vzcy5lbnYuQ01EX1BSX0VOQUJMRUQsIHRydWUpLFxuICAgIH0sXG4gIH0pXG4gIGdsb2JhbC5leGl0QWZ0ZXJDb21tYW5kRXhlY3V0ZWQgPSBmYWxzZVxufSkoKVxuIl19