"use strict";
;
(() => {
    const dotenv = require('dotenv');
    dotenv.config({ path: './.msh' });
    dotenv.config({ path: './.msh-user' });
    const envToJson = (env, def) => {
        try {
            return JSON.parse(process.env[env]);
        }
        catch (_) {
            return def;
        }
    };
    const envToBoolean = (env, def) => {
        if ((env || '') === '')
            return def;
        return env.toLocaleLowerCase() === 'true';
    };
    global.config = Object.freeze({
        rootDir: process.env.ROOT_DIR || process.cwd() || './',
        projects: envToJson('PROJECTS', []),
        pullRequestSkip: envToJson('PULL_REQUEST_SKIP', []),
        git: {
            team: process.env.GIT_TEAM || '',
            projectPrefix: process.env.GIT_PROJECT_PREFIX || '',
            host: process.env.GIT_HOST || 'bitbucket.org',
            username: process.env.GIT_USERNAME || '',
        },
        dockerBaseImages: envToJson('DOCKER_BASE_IMAGES', []),
        cmd: {
            gitEnabled: envToBoolean(process.env.CMD_GIT_ENABLED, true),
            cleanEnabled: envToBoolean(process.env.CMD_CLEAN_ENABLED, true),
            npmEnabled: envToBoolean(process.env.CMD_NPM_ENABLED, true),
            prEnabled: envToBoolean(process.env.CMD_PR_ENABLED, true),
        },
    });
    global.exitAfterCommandExecuted = false;
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBd0JBLENBQUM7QUFBQSxDQUFDLEdBQUcsRUFBRTtJQUNMLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFBO0lBRXRDLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBTyxFQUFFO1FBQ2xDLElBQUk7WUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQVcsQ0FBQyxDQUFBO1NBQzlDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLEdBQUcsQ0FBQTtTQUNYO0lBQ0gsQ0FBQyxDQUFBO0lBQ0QsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBWSxFQUFXLEVBQUU7UUFDbEQsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxHQUFHLENBQUE7UUFDbEMsT0FBTyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxNQUFNLENBQUE7SUFDM0MsQ0FBQyxDQUFBO0lBRUQsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzVCLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSTtRQUN0RCxRQUFRLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUM7UUFDbkMsZUFBZSxFQUFFLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLENBQUM7UUFDbkQsR0FBRyxFQUFFO1lBQ0gsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLEVBQUU7WUFDaEMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLElBQUksRUFBRTtZQUNuRCxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksZUFBZTtZQUM3QyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksRUFBRTtTQUN6QztRQUNELGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUM7UUFDckQsR0FBRyxFQUFFO1lBQ0gsVUFBVSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUM7WUFDM0QsWUFBWSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQztZQUMvRCxVQUFVLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQztZQUMzRCxTQUFTLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQztTQUMxRDtLQUNGLENBQUMsQ0FBQTtJQUNGLE1BQU0sQ0FBQyx3QkFBd0IsR0FBRyxLQUFLLENBQUE7QUFDekMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgbmFtZXNwYWNlIE5vZGVKUyB7XG4gIGludGVyZmFjZSBHbG9iYWwge1xuICAgIGNvbmZpZzoge1xuICAgICAgcm9vdERpcjogc3RyaW5nXG4gICAgICBwcm9qZWN0czogc3RyaW5nW11cbiAgICAgIHB1bGxSZXF1ZXN0U2tpcDogc3RyaW5nW11cbiAgICAgIGdpdDoge1xuICAgICAgICB0ZWFtOiBzdHJpbmdcbiAgICAgICAgcHJvamVjdFByZWZpeDogc3RyaW5nXG4gICAgICAgIGhvc3Q6IHN0cmluZ1xuICAgICAgICB1c2VybmFtZTogc3RyaW5nXG4gICAgICB9XG4gICAgICBkb2NrZXJCYXNlSW1hZ2VzOiBzdHJpbmdbXVxuICAgICAgY21kOiB7XG4gICAgICAgIGdpdEVuYWJsZWQ6IGJvb2xlYW5cbiAgICAgICAgY2xlYW5FbmFibGVkOiBib29sZWFuXG4gICAgICAgIG5wbUVuYWJsZWQ6IGJvb2xlYW5cbiAgICAgICAgcHJFbmFibGVkOiBib29sZWFuXG4gICAgICB9XG4gICAgfVxuICAgIGV4aXRBZnRlckNvbW1hbmRFeGVjdXRlZDogYm9vbGVhblxuICB9XG59XG5cbjsoKCkgPT4ge1xuICBjb25zdCBkb3RlbnYgPSByZXF1aXJlKCdkb3RlbnYnKVxuICBkb3RlbnYuY29uZmlnKHsgcGF0aDogJy4vLm1zaCcgfSlcbiAgZG90ZW52LmNvbmZpZyh7IHBhdGg6ICcuLy5tc2gtdXNlcicgfSlcblxuICBjb25zdCBlbnZUb0pzb24gPSAoZW52LCBkZWYpOiBhbnkgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShwcm9jZXNzLmVudltlbnZdIGFzIHN0cmluZylcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICByZXR1cm4gZGVmXG4gICAgfVxuICB9XG4gIGNvbnN0IGVudlRvQm9vbGVhbiA9IChlbnYsIGRlZjogYm9vbGVhbik6IGJvb2xlYW4gPT4ge1xuICAgIGlmICgoZW52IHx8ICcnKSA9PT0gJycpIHJldHVybiBkZWZcbiAgICByZXR1cm4gZW52LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09ICd0cnVlJ1xuICB9XG5cbiAgZ2xvYmFsLmNvbmZpZyA9IE9iamVjdC5mcmVlemUoe1xuICAgIHJvb3REaXI6IHByb2Nlc3MuZW52LlJPT1RfRElSIHx8IHByb2Nlc3MuY3dkKCkgfHwgJy4vJyxcbiAgICBwcm9qZWN0czogZW52VG9Kc29uKCdQUk9KRUNUUycsIFtdKSxcbiAgICBwdWxsUmVxdWVzdFNraXA6IGVudlRvSnNvbignUFVMTF9SRVFVRVNUX1NLSVAnLCBbXSksXG4gICAgZ2l0OiB7XG4gICAgICB0ZWFtOiBwcm9jZXNzLmVudi5HSVRfVEVBTSB8fCAnJyxcbiAgICAgIHByb2plY3RQcmVmaXg6IHByb2Nlc3MuZW52LkdJVF9QUk9KRUNUX1BSRUZJWCB8fCAnJyxcbiAgICAgIGhvc3Q6IHByb2Nlc3MuZW52LkdJVF9IT1NUIHx8ICdiaXRidWNrZXQub3JnJyxcbiAgICAgIHVzZXJuYW1lOiBwcm9jZXNzLmVudi5HSVRfVVNFUk5BTUUgfHwgJycsXG4gICAgfSxcbiAgICBkb2NrZXJCYXNlSW1hZ2VzOiBlbnZUb0pzb24oJ0RPQ0tFUl9CQVNFX0lNQUdFUycsIFtdKSxcbiAgICBjbWQ6IHtcbiAgICAgIGdpdEVuYWJsZWQ6IGVudlRvQm9vbGVhbihwcm9jZXNzLmVudi5DTURfR0lUX0VOQUJMRUQsIHRydWUpLFxuICAgICAgY2xlYW5FbmFibGVkOiBlbnZUb0Jvb2xlYW4ocHJvY2Vzcy5lbnYuQ01EX0NMRUFOX0VOQUJMRUQsIHRydWUpLFxuICAgICAgbnBtRW5hYmxlZDogZW52VG9Cb29sZWFuKHByb2Nlc3MuZW52LkNNRF9OUE1fRU5BQkxFRCwgdHJ1ZSksXG4gICAgICBwckVuYWJsZWQ6IGVudlRvQm9vbGVhbihwcm9jZXNzLmVudi5DTURfUFJfRU5BQkxFRCwgdHJ1ZSksXG4gICAgfSxcbiAgfSlcbiAgZ2xvYmFsLmV4aXRBZnRlckNvbW1hbmRFeGVjdXRlZCA9IGZhbHNlXG59KSgpXG4iXX0=